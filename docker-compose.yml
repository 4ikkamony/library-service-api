services:
  app:
    restart: unless-stopped
    build:
      context: .
    container_name: library-backend
    command: ["/bin/sh", "/usr/src/app/commands/run_library_backend.sh"]
    env_file:
      - .env
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - library-network

  celery:
    restart: unless-stopped
    build:
      context: .
    container_name: library-celery
    command: celery -A core.celery_config worker --loglevel=info
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - library-network

  celery-beat:
    restart: unless-stopped
    build:
      context: .
    container_name: library-celery-beat
    command: celery -A core.celery_config beat --loglevel=info
    env_file:
      - .env
    depends_on:
      - db
      - redis
    networks:
      - library-network

  redis:
    image: redis:latest
    container_name: redis-library
    env_file:
      - .env
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - library-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --requirepass redis_password

  db:
    image: "postgres:alpine"
    container_name: postgres-library
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_library_data:/var/lib/postgresql/data
    networks:
      - library-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB -h 127.0.0.1 || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  redis-data:
  postgres_library_data:
    driver: local

networks:
  library-network:
    driver: bridge
